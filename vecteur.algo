PROCEDURE dot_product(var v1,v2: ARRAY_OF INTEGER)
VAR
    v1,v2 : ARRAY_OF INTEGER[2]
    ps : INTEGER
    i, j , n1 , n2 : INTEGER
    
BEGIN
    IF (v1[i]. length == v2[j].length ) THEN
         FOR i FROM 0 TO n-1 STEP 1  DO
            ps:= ps + (v1[i]*v2[j])
         END_FOR
         write (ps) 
    ELSE 
        write('the length of two vecteurs not eguals')    
    END_IF    
END

FUNCTION dot_product(v1,v2 : ARRAY_OF INTEGER) : INTEGER
VAR
    i, ps : INTEGER;
BEGIN
    ps :=0;
    i:=0;
    IF (v1.length <> v2.length) THEN
        Write("vectors with different sizes we cannot calculat dot product");
        RETURN NaN; // NaN : not definte number
    END_IF
    WHILE (i <v1.length ) DO
        ps := ps + v1[i]*v2[i];
    END_WHILE
    RETURN ps ;
END

ALGORITHM orth_vectors
VAR
    v1,v2 : ARRAY_OF INTEGER [50];
    dot : INTEGER;
BEGIN
    n1 := read_size();
    read_array(n1,v1);
    n2 := read_size();
    read_array(n2,v2);
    dot_product(v1,v2,dot);
    IF (dot = 0) THEN
        Write("V1 and V2 are orthogonal");
    ELSE
        Write("V1 and V2 are not orthogonal");
    END_IF
END


ALGORITHM vecteurs
VAR
    v1,v2 : ARRAY_OF INTEGER[3]
    i ,j ,n1 , n2 : INTEGER
    ps : INTEGER

BEGIN
    REPEAT
        read(n1)
        read(n2)
    UNTIL (n1 > 0 && n2 > 0)
    FOR i FROM 0 TO n1 STEP 1 DO
        FOR j FROM 0 TO n2 STEP 1 DO
            read(v1[i])
            read(v2[j])
        END_FOR
        
    END_FOR
    ps := dot_product(v1,v2);
    IF (ps = 0) THEN
        Write("V1 and V2 are orthogonal");
    ELSE
        Write("V1 and V2 are not orthogonal");
    END_IF
END